#!/usr/bin/with-contenv bashio

# Import the add-on configuration options as environment variables

MQTT_USER=$(bashio::config 'mqtt_user')
MQTT_PASSWORD=$(bashio::config 'mqtt_password')
MQTT_SERVER=$(bashio::config 'mqtt_broker_address')
MQTT_PROTOCOL=$(bashio::config 'mqtt_protocol')
MQTT_PORT=$(bashio::config 'mqtt_broker_port')
COMFORT_ADDRESS=$(bashio::config 'comfort_address')
COMFORT_PORT=$(bashio::config 'comfort_port')
COMFORT_LOGIN_ID=$(bashio::config 'comfort_login_id')
MQTT_USE_TLS=$(bashio::config 'mqtt_encryption')
MQTT_CA_CERT_PATH=$(bashio::config 'broker_ca')
MQTT_CLIENT_CERT_PATH=$(bashio::config 'broker_client_cert')
MQTT_CLIENT_KEY_PATH=$(bashio::config 'broker_client_key')
MQTT_LOG_LEVEL=$(bashio::config 'log_verbosity')
COMFORT_INPUTS=$(bashio::config 'alarm_inputs')
COMFORT_OUTPUTS=$(bashio::config 'alarm_outputs')
COMFORT_RIO_INPUTS=$(bashio::config 'alarm_rio_inputs')
COMFORT_RIO_OUTPUTS=$(bashio::config 'alarm_rio_outputs')
COMFORT_RESPONSES=$(bashio::config 'alarm_responses')
COMFORT_FLAGS=$(bashio::config 'alarm_flags')
COMFORT_COUNTERS=$(bashio::config 'alarm_counters')
COMFORT_TIME=$(bashio::config 'comfort_time')

# Arguments for Comfort2MQTT to run.
COMFORT_ARGS="--broker-address ${MQTT_SERVER:?unset}"

if [ "${MQTT_PROTOCOL}" != "null" ]; then
   COMFORT_ARGS="${COMFORT_ARGS} --broker-protocol ${MQTT_PROTOCOL}"
fi

if [ "${MQTT_PORT}" != "null" ]; then
   COMFORT_ARGS="${COMFORT_ARGS} --broker-port ${MQTT_PORT}"
fi

if [ "${MQTT_USER}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --broker-username ${MQTT_USER}"
fi

if [ "${MQTT_PASSWORD}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --broker-password ${MQTT_PASSWORD}"
fi

# MQTT use TLS
if [ "${MQTT_USE_TLS}" != "null" ]; then
      COMFORT_ARGS="${COMFORT_ARGS} --broker-encryption ${MQTT_USE_TLS}"
fi


if [ "${MQTT_USE_TLS}" == true ]; then
    bashio::log.info "Using TLS to encrypt MQTT broker traffic."

    # bashio::log.info "Here #1 ${MQTT_CA_CERT_PATH}"

    # # Using TLS, check for certificates directory
    # if [ "${MQTT_CA_CERT_PATH}" != "null" ]; then
    #     bashio::log.info "Here #2 ${MQTT_CA_CERT_PATH}"
    #     if [ -f "${MQTT_CA_CERT_PATH}" ]; then
    #         bashio::log.info "Here #3 ${MQTT_CA_CERT_PATH}"
    #         bashio::log.info "Using custom certificates in ${MQTT_CA_CERT_PATH}"
             COMFORT_ARGS="${COMFORT_ARGS} --broker-ca ${MQTT_CA_CERT_PATH}"
    #     else
    #         bashio::log.info "Here #4 ${MQTT_CA_CERT_PATH}"
    #         bashio::log.info "${MQTT_CA_CERT_PATH} not found, using Python CA store."
    #     fi
    # else
    #     bashio::log.info "Here #5 ${MQTT_CA_CERT_PATH}"
    #     bashio::log.info "Certificates Directory was not provided, using Python CA store."
    # fi

    # # Client certificates
    # if [ "${MQTT_CLIENT_CERT_PATH}" == "null" ]; then
    #     bashio::log.info  "No value was provided for MQTT_CLIENT_CERT_PATH, not using "
    #     bashio::log.info "client certificates for authentication."
    # elif [ "${MQTT_CLIENT_KEY_PATH}" == "null" ]; then
    #     bashio::log.info  "No value was provided for MQTT_CLIENT_KEY_PATH, not using "
    #     bashio::log.info "client certificates for authentication."
    # elif [ -e "${MQTT_CLIENT_CERT_PATH}" ] && [ -e "${MQTT_CLIENT_KEY_PATH}" ]; then
    #     bashio::log.info "Using client cert: ${MQTT_CLIENT_CERT_PATH}"
    #     bashio::log.info "Using client key: ${MQTT_CLIENT_KEY_PATH}"
    #     COMFORT_ARGS="${COMFORT_ARGS} --broker-client-cert ${MQTT_CLIENT_CERT_PATH} --broker-client-key ${MQTT_CLIENT_KEY_PATH}"
    # else
    #     bashio::log.info "${MQTT_CLIENT_CERT_PATH} and/or ${MQTT_CLIENT_KEY_PATH} not found, not using "
    #     bashio::log.info "client certificates for authentication."
    # fi
else
    bashio::log.warning "Disabling TLS support for MQTT broker."
    #COMFORT_ARGS="${COMFORT_ARGS} --broker-encryption false"
fi



if [ "${COMFORT_ADDRESS}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --comfort-address ${COMFORT_ADDRESS}"
fi

if [ "${COMFORT_PORT}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --comfort-port ${COMFORT_PORT}"
fi

if [ "${COMFORT_LOGIN_ID}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --comfort-login-id ${COMFORT_LOGIN_ID}"
fi

if [ "${COMFORT_INPUTS}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --alarm-inputs ${COMFORT_INPUTS}"
fi

if [ "${COMFORT_OUTPUTS}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --alarm-outputs ${COMFORT_OUTPUTS}"
fi

if [ "${COMFORT_RIO_INPUTS}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --alarm-rio-inputs ${COMFORT_RIO_INPUTS}"
fi

if [ "${COMFORT_RIO_OUTPUTS}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --alarm-rio-outputs ${COMFORT_RIO_OUTPUTS}"
fi

if [ "${COMFORT_RESPONSES}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --alarm-responses ${COMFORT_RESPONSES}"
fi

if [ "${COMFORT_FLAGS}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --alarm-flags ${COMFORT_FLAGS}"
fi

if [ "${COMFORT_COUNTERS}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --alarm-counters ${COMFORT_COUNTERS}"
fi

if [ "${COMFORT_TIME}" != "null" ]; then
    COMFORT_ARGS="${COMFORT_ARGS} --comfort-time ${COMFORT_TIME}"
fi

if [ "${MQTT_LOG_LEVEL}" != "null" ]; then
      COMFORT_ARGS="$COMFORT_ARGS --verbosity $MQTT_LOG_LEVEL"
fi

## Run Comfort2MQTT program
bashio::log.info "Starting Comfort to MQTT..."
exec python /comfort2/comfort2.py $COMFORT_ARGS
